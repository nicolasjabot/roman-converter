name: PR CI

on:
  pull_request:
    branches: [ main ]

jobs:
  conventional-commits:
    name: Conventional Commit check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: wagoid/commitlint-github-action@v6

  lint-format-test:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test,lint]"

      - name: Run lint (ruff)
        run: ruff check .

      - name: Check formatting (ruff)
        run: ruff format .

      - name: Run pytest
        run: pytest

  # docker:
  #   name: Docker Build & Test
  #   env:
  #     DB_HOST: ${{ secrets.DB_HOST }}
  #     DB_PORT: ${{ secrets.DB_PORT }}
  #     DB_NAME: ${{ secrets.DB_NAME }}
  #     DB_USER: ${{ secrets.DB_USER }}
  #     DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  #     REGION: ${{ vars.GCP_REGION }}
  #     PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  #     IMAGE_NAME: roman-api
  docker:
    runs-on: ubuntu-latest
    env:
      GCP_REGION: ${{ vars.GCP_REGION }}
      PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      IMAGE_NAME: roman-api
      REPO: nico-roman-converter
      TAG: ${{ github.event.pull_request.number }}
    steps:
      - uses: actions/checkout@v4

      - name: Auth to GCP
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: "Use gcloud CLI"
        run: "gcloud info"

      - name: "Docker auth"
        run: |-
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet
    
      - name: Build Docker image
        run: |
          IMAGE="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

